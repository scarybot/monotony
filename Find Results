Searching 17 files for "transactions"

/Users/jd/git/personal/monotony/lib/monotony/player.rb:
  223  				simulated_player = self.simulate
  224  				simulated_square.action.call(simulated_game, simulated_square.owner, simulated_player, simulated_square)
  225: 				fees << simulated_player.transactions.inject(:+)
  226  			end
  227  			pp fees

/Users/jd/git/personal/monotony/lib/monotony/simulatedplayer.rb:
    3  	class SimulatedPlayer < Player
    4  		attr_accessor :hits, :board, :name, :currency, :history, :properties, :in_game, :turns_in_jail, :behaviour, :game, :jail_free_cards, :is_simulation, :in_jail
    5: 		attr_reader :transactions
    6  
    7  		# @return [SimulatedPlayer] self
    .
   20  			@behaviour = Monotony::DefaultBehaviour::SIMULATION
   21  
   22: 			@transactions = []
   23  			self
   24  		end
   25  		def pay(beneficiary = :bank, amount = 0, description = nil)
   26: 			@transactions << (0 - amount.to_i)
   27  		end
   28  		def receive(amount)
   29: 			@transactions << amount.to_i
   30  		end
   31  	end

5 matches across 2 files


Searching 17 files for "divident"

0 matches

Searching 17 files for "dividend"

/Users/jd/git/personal/monotony/lib/monotony/variants.rb:
   32  			'Pay school fees of £150',
   33  			'Advance to GO',
   34: 			'Bank pays you dividend of £50',
   35  			'Drunk in charge (£20 fine)',
   36  			'Go to jail. Move directly to jail. Do not pass GO. Do not collect £200',

1 match in 1 file


Searching 17 files for "pay_player"

/Users/jd/git/personal/monotony/lib/monotony/chance.rb:
   30  					player.move('Pall Mall')
   31  				when /Your building loan matures/
   32: 					game.pay_player(player, 100)
   33  				when /Speeding fine/
   34  					player.pay(:free_parking, 15, 'speeding fine')
   ..
   36  					player.pay(:free_parking, 150, 'school fees')
   37  				when /Bank pays you/
   38: 					game.pay_player(player, 50)
   39  				when /Drunk in charge/
   40  					player.pay(:free_parking, 50, 'being drunk in charge')
   41  				when /crossword/
   42: 					game.pay_player(player, 100)
   43  				when /general repairs/
   44  					player.pay(:free_parking, (25 * player.num_houses) + (100 * player.num_hotels), 'general repairs')

/Users/jd/git/personal/monotony/lib/monotony/communitychest.rb:
   26  					puts '[%s] Got sent to jail!' % player.name
   27  				when /Annuity matures/
   28: 					game.pay_player(player, 150)
   29  				when /sale of stock/
   30: 					game.pay_player(player, 50)
   31  				when /preference shares/
   32: 					game.pay_player(player, 25)
   33  				when /tax refund/
   34: 					game.pay_player(player, 20)
   35  				when /insurance premium/
   36  					player.pay(:free_parking, 50, 'insurance')
   ..
   38  					player.pay(:free_parking, 50, "doctor's fees")
   39  				when /Bank error/
   40: 					game.pay_player(player, 200)
   41  				when /hospital/
   42  					player.pay(:free_parking, 100, 'hospital fees')
   43  				when /beauty contest/
   44: 					game.pay_player(player, 10)
   45  				when /inherit/
   46: 					game.pay_player(player, 100)
   47  				when 'Advance to GO'
   48  					player.move('GO')

/Users/jd/git/personal/monotony/lib/monotony/game.rb:
  195  		# Transfers money from the bank to a player. If the bank does not have sufficient funds, transfers as much as possible.
  196  		# @return [Boolean] whether or not the bank had sufficient cash to pay the player the desired amount.
  197: 		def pay_player(player, amount, reason = nil)
  198  			amount = amount.to_int
  199  			reason = reason.to_s

/Users/jd/git/personal/monotony/lib/monotony/player.rb:
   92  					unless in_jail?
   93  						puts '[%s] Passed GO' % @name
   94: 						@game.pay_player(self, @game.go_amount, 'passing go')
   95  					end
   96  				end

/Users/jd/git/personal/monotony/lib/monotony/variants.rb:
   46  				display_class: 'bigsquare',
   47  				action: Proc.new { |game, owner, player, property|
   48: 					game.pay_player(player, game.go_amount, 'landing on GO')
   49  				}
   50  			),

13 matches across 5 files


Searching 17 files for "Due to pay"

/Users/jd/git/personal/monotony/lib/monotony/basicproperty.rb:
   39  					if owner != player
   40  						if not owner.is_out? and not is_mortgaged?
   41: 							puts '[%s] Due to pay £%d rent to %s for landing on %s with %s' % [ player.name, rent_to_pay, owner.name, property.name, ( property.num_hotels == 1 ? 'a hotel' : '%d houses' % property.num_houses) ]
   42  							player.pay(owner, rent_to_pay)
   43  						end

1 match in 1 file


Searching 17 files for "puts"

/Users/jd/git/personal/monotony/lib/monotony/basicproperty.rb:
   39  					if owner != player
   40  						if not owner.is_out? and not is_mortgaged?
   41: 							puts '[%s] Due to pay £%d rent to %s for landing on %s with %s' % [ player.name, rent_to_pay, owner.name, property.name, ( property.num_hotels == 1 ? 'a hotel' : '%d houses' % property.num_houses) ]
   42  							player.pay(owner, rent_to_pay)
   43  						end
   ..
   68  			if @owner.game.num_houses >= number
   69  				if (@num_houses + number) > 4
   70: 					puts '[%s] Cannot place more than 4 houses on %s' % [ @owner.name, @name ]
   71  				else
   72  					if @owner.currency < housing_value
   73: 						puts '[%s] Unable to buy %d houses! (short of cash by £%d)' % [ @owner.name, number, (housing_value - @owner.currency) ]
   74  						false
   75  					else
   ..
   77  						@owner.game.num_houses = @owner.game.num_houses - number
   78  						@num_houses = @num_houses + number
   79: 						puts '[%s] Purchased %d houses on %s for £%d (new balance: £%d)' % [ @owner.name, number, @name, housing_value, @owner.currency ]
   80  						true
   81  					end
   82  				end
   83  			else
   84: 				puts '[%s] Not enough houses left to purchase %d more for %s' % [ @owner.name, number, @name ]
   85  			end
   86  			self
   ..
   94  			housing_value = (@house_cost / 2) * number
   95  			if number > @num_houses
   96: 				puts "[%s] Can't sell %d houses on %s, as there are only %d" % [ @owner.name, number, @name, @num_houses ]
   97  				false
   98  			else
   ..
  100  				@owner.game.num_houses = @owner.game.num_houses + number
  101  				@owner.receive(housing_value)
  102: 				puts '[%s] Sold %d houses on %s for £%d (%d remaining)' % [ @owner.name, number, @name, housing_value, @num_houses ]
  103  			end
  104  			self
  ...
  111  				if @owner.game.num_houses > 0
  112  					if @owner.currency < @hotel_cost
  113: 						puts '[%s] Unable to buy a hotel! (short of cash by £%d)' % [ @owner.name, (@hotel_cost - @owner.currency) ]
  114  					else
  115  						@owner.deduct(@hotel_cost)
  ...
  117  						@owner.game.num_houses = @owner.game.num_houses + 4
  118  						@owner.game.num_hotels = @owner.game.num_hotels - 1
  119: 						puts '[%s] Purchased a hotel on %s for £%d (new balance: £%d)' % [ @owner.name, @name, @hotel_cost, @owner.currency ]
  120  					end			
  121  				else
  122: 					puts '[%s] Not enough hotels left to purchase one for %s' % [ @owner.name, @name ]
  123  				end
  124  			end
  ...
  130  		def sell_hotel
  131  			if @num_hotels < 1
  132: 				puts "[%s] Can't sell hotel on %s, as there isn't one!" % [ @owner.name, @name ]
  133  			else
  134  			 	housing_value = (@hotel_cost / 2) 
  ...
  136  				@owner.game.num_hotels = @owner.game.num_hotels + 1
  137  				@owner.receive(housing_value)
  138: 				puts '[%s] Sold hotel on %s for £%d' % [ @owner.name, @name, housing_value ]
  139  				case @owner.game.num_houses
  140  				when 1..3
  141  					sell_houses(4 - @owner.game.num_houses)
  142: 					puts '[%s] Devolved %s to %d houses as 4 were not available' % [ @owner.name, @name, @num_houses ]
  143  				when 0
  144  					sell_houses(4)
  145: 					puts '[%s] Devolved to undeveloped site as no houses were available' % [ @owner.name, @name, @num_houses ]
  146  				else
  147  					@owner.game.num_houses = @owner.game.num_houses - 4
  148  					@num_houses = 4
  149: 					puts '[%s] Devolved %s to %d houses' % [ @owner.name, @name, @num_houses ]
  150  				end
  151  			end

/Users/jd/git/personal/monotony/lib/monotony/behaviour.rb:
   84  			},
   85  			trade_possible: Proc.new { |game, player|
   86: 				puts '[%s] Considering possible trades' % player.name
   87  			    invested_colours = player.properties.collect(&:set).uniq
   88  			    player.opponents.each do |opponent|
   ..
   99  			    		offer_amount = player.currency * factors.values.inject(&:*)
  100  			    		if offer_amount > desirable_property.cost and player.currency >= offer_amount
  101: 							puts '[%s] Placing offer of £%d on %s (owned by %s) [%f]' % [ player.name, offer_amount, desirable_property.name, desirable_property.owner.name, factors.values.inject(&:*) * 100 ]
  102  
  103  				    		desirable_property.place_offer(player, offer_amount)
  ...
  117  				# Random element
  118  				factors[:random] = Random.rand(1..100)
  119: 				puts '[%s] Considering offer of £%d for %s (from %s) [%f]' % [ player.name, amount, property.name, proposer.name, ( factors.values.collect{ |f| ( 100 / factors.count ) * f }.inject(:+) / 100 ) ]
  120  				property.sell_to(proposer, amount) if Random.rand(1..100) > ( factors.values.collect{ |f| ( 100 / factors.count ) * f }.inject(:+) / 100 )
  121  			}

/Users/jd/git/personal/monotony/lib/monotony/chance.rb:
   12  			@action = Proc.new do |game, owner, player, property|
   13  				this_chance = game.chance
   14: 				puts '[%s] Drew a chance: %s' % [ player.name, this_chance ]
   15  
   16  				case this_chance
   ..
   18  				when 'Go back three spaces'
   19  					moved_to = player.move(-3)
   20: 					puts '[%s] Moved back to %s' % [ player.name, moved_to.name ]
   21  				when 'Take a trip to Marylebone Station'
   22  					player.move('Marylebone Station')

/Users/jd/git/personal/monotony/lib/monotony/communitychest.rb:
   12  			@action = Proc.new do |game, owner, player, property|
   13  				this_cc = game.community_chest
   14: 				puts '[%s] Drew a community chest: %s' % [ player.name, this_cc ]
   15  
   16  				case this_cc
   ..
   24  					player.in_jail = true
   25  					player.move('Jail')
   26: 					puts '[%s] Got sent to jail!' % player.name
   27  				when /Annuity matures/
   28  					game.pay_player(player, 150, 'annuity')

/Users/jd/git/personal/monotony/lib/monotony/game.rb:
  145  				worth = @players.collect { |p| '%s: £%d' % [ p.name, p.currency ]}
  146  				header << 'Balances: %s' % worth.join(', ')
  147: 				puts header
  148: 				puts
  149  
  150  				@board.each do |property|
  151  					if position % 10 == 0 and position > 0
  152: 						puts summary.collect! { |s| s << "\n" }
  153: 						puts
  154  
  155  						summary.collect! { '' }
  ...
  186  
  187  				summary_out = summary.collect! { |s| s << "\n" }
  188: 				puts summary_out
  189: 				puts
  190  				return summary_out
  191  			end
  ...
  212  				player.receive(amount)
  213  				@bank_balance = @bank_balance - amount unless player.respond_to? :is_simulation
  214: 				puts '[%s] Received £%d from bank%s (balance: £%d, bank balance: £%d)' % [ player.name, amount, (reason ? ' for %s' % reason : '' ), player.currency, bank_balance ]
  215  				true
  216  			else
  217  				player.receive(bank_balance)
  218: 				puts '[%s] Unable to receive £%d from bank! Received £%d instead (balance: £%d)' % [ player.name, amount, bank_balance, player.currency ]
  219  				@bank_balance = 0
  220  				false
  ...
  227  			payout = @free_parking_balance
  228  			player.receive(payout)
  229: 			puts '[%s] Landed on free parking! £%d treasure found' % [player.name, @free_parking_balance] unless @free_parking_balance == 0
  230  			@free_parking_balance = 0
  231  			payout
  ...
  257  
  258  			if @completed
  259: 				puts 'Game is complete!'
  260  				return false
  261  			end
  ...
  263  			turns.times do
  264  				@turn = @turn + 1
  265: 				puts '- Turn %d begins!' % @turn
  266  				@players.each do |turn|
  267  					if turn.is_out?
  268: 						puts '[%s] Is sitting out' % turn.name
  269  						next
  270  					end
  271: 					puts '[%s] Begins on %s (balance: £%d)' % [ turn.name , turn.current_square.name, turn.currency ]
  272  
  273  					turn.properties.each do |property|
  ...
  307  
  308  
  309: 					puts '[%s] Rolled %s (total: %d)' % [ turn.name, result.join(', '), move_total ]
  310: 					puts '[%s] Rolled a double' % turn.name if double
  311  
  312  					if turn.in_jail?
  313  						if double
  314: 							puts '[%s] Got out of jail! (rolled double)' % turn.name
  315  							turn.in_jail = false
  316  						else
  317  							turn.turns_in_jail = turn.turns_in_jail + 1
  318: 							puts '[%s] Is still in jail (turn %d)' % [ turn.name, turn.turns_in_jail ]
  319  							if turn.turns_in_jail >= @max_turns_in_jail
  320  								turn.in_jail = false
  321  								turn.pay(:free_parking, 50)
  322: 								puts '[%s] Got out of jail (paid out)' % turn.name
  323  							else 
  324  								next
  ...
  329  					square = turn.move(move_total)
  330  
  331: 					puts '[%s] Moved to %s' % [ turn.name, square.name ]
  332  					square.action.call(self, square.owner, turn, square)
  333  
  334: 					puts '[%s] Next throw' % turn.name if double
  335  					redo if double
  336: 					puts '[%s] Ended on %s (balance: £%d)' % [ turn.name, turn.current_square.name, turn.currency ]
  337  				end
  338  
  ...
  340  				if active_players.count == 1
  341  					winner = still_in.first
  342: 					puts '[%s] Won the game! Final balance: £%d, Property: %s' % [ winner.name, winner.currency, winner.properties.collect {|p| p.name} ]
  343  					@completed = true
  344  					break

/Users/jd/git/personal/monotony/lib/monotony/player.rb:
   91  				if n >= distance_to_go
   92  					unless in_jail?
   93: 						puts '[%s] Passed GO' % @name
   94  						@game.pay_player(self, @game.go_amount, 'passing go')
   95  					end
   ..
  119  		def bankrupt!(player = :bank)
  120  			if player == :bank
  121: 				puts '[%s] Bankrupt! Giving all assets to bank' % @name
  122  				@properties.each do |property|
  123  					property.owner = nil
  ...
  127  				@properties = []
  128  			else
  129: 				puts '[%s] Bankrupt! Giving all assets to %s' % [ @name, player.name ]
  130  				@properties.each { |p| p.owner = player }
  131: 				puts '[%s] Transferred properties to %s: %s' % [ @name, player.name, @properties.collect { |p| p.name }.join(', ') ]
  132  				player.properties.concat @properties unless player == nil
  133  				@properties = []
  ...
  142  			amount = amount.to_int
  143  
  144: 			puts '[%s] Has money trouble and is trying to raise £%d... (balance: £%d)' % [ @name, (amount - @currency), @currency ]
  145  			@behaviour[:money_trouble].call(game, self, amount)
  146  			@currency > amount
  ...
  149  		# Declares a player as out of the game.
  150  		def out!
  151: 			puts '[%s] is out of the game!' % @name
  152  			@in_game = false
  153  		end
  ...
  162  		def use_jail_card!
  163  			if @jail_free_cards > 0 and @in_jail
  164: 				puts "[%s] Used a 'get out of jail free' card!" % @name
  165  				@in_jail = false
  166  				@turns_in_jail = 0
  ...
  198  
  199  			if amount_to_pay < amount then			
  200: 				puts '[%s] Unable to pay £%d to %s%s! Paid £%d instead' % [ @name, amount, paying_to, ( description ? ' for %s' % description : '' ), amount_to_pay ]
  201  				bankrupt!(beneficiary)
  202  				false
  203  			else
  204: 				puts '[%s] Paid £%d to %s%s (balance: £%d)' % [ @name, amount, paying_to, ( description ? ' for %s' % description : '' ), @currency ]
  205  				true
  206  			end
  ...
  229  			best_fee = sorted_fees.last || [ 'null', 0 ]
  230  			worst_fee = sorted_fees.first || [ 'null', 0 ]
  231: 			puts '[%s] (AI) Forecast: Worst £%d %s (%s), Best £%d %s (%s), Average £%d %s on next roll' % [ @name, worst_fee[1].abs, (worst_fee[1].to_int > 0 ? 'up' : 'down'), worst_fee[0], best_fee[1].abs, (best_fee[1].to_int > 0 ? 'up' : 'down'), best_fee[0], (fees.values.inject(:+) / fees.values.size).to_int.abs, ((fees.values.inject(:+) / fees.values.size).to_int > 0 ? 'up' : 'down') ]
  232  			sorted_fees.collect { |f| - f[1] }
  233  		end

/Users/jd/git/personal/monotony/lib/monotony/purchasable.rb:
   31  			amount = amount.to_int
   32  			if player.currency < amount then
   33: 				puts '[%s] Unable to buy %s! (short of cash by £%d)' % [ player.name, @name, ( amount - player.currency ) ]
   34  				false
   35  			else
   ..
   38  				if @owner
   39  					owner.receive(amount)
   40: 					puts '[%s] Sold %s%s to %s for £%d (new balance: £%d)' % [ @owner.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), player.name, amount, @owner.currency ]
   41  					@owner.properties.delete self
   42  				else
   43: 					puts '[%s] Purchased %s%s for £%d (new balance: £%d)' % [ player.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), amount, player.currency ]
   44  				end
   45  
   ..
   97  		# Gives a property to another player. Available for use as part of a trading behaviour.
   98  		def give_to(player)
   99: 			puts '[%s] Gave %s to %s' % [ @owner.name, @name, player.name ]
  100  			@owner.properties.delete self
  101  			@owner = player
  ...
  107  		def mortgage
  108  			unless is_mortgaged?
  109: 				puts '[%s] Mortgaged %s for £%d' % [ @owner.name, @name, @mortgage_value ]
  110  				@is_mortgaged = true
  111  				@owner.receive(@mortgage_value)
  ...
  120  			if is_mortgaged?
  121  				if @owner.currency > cost
  122: 					puts '[%s] Unmortgaged %s for £%d' % [ @owner.name, @name, cost ]
  123  					@owner.deduct(cost)
  124  					@is_mortgaged = false
  125  				else
  126: 					puts '[%s] Unable to unmortgage %s (not enough funds)' % [ @owner.name, @name ]
  127  				end
  128  			else
  129: 				puts '[%] Tried to unmortgage a non-mortgaged property (%s)' % [ @owner.name, @name ]
  130  			end
  131  			self

/Users/jd/git/personal/monotony/lib/monotony/variants.rb:
  328  					player.in_jail = true
  329  					player.move('Jail')
  330: 					puts '[%s] Got sent to jail!' % player.name
  331  				}
  332  			),

63 matches across 8 files


Searching 17 files for "puts"

/Users/jd/git/personal/monotony/lib/monotony/behaviour.rb:
   84  			},
   85  			trade_possible: Proc.new { |game, player|
   86: 				puts '[%s] Considering possible trades' % player.name
   87  			    invested_colours = player.properties.collect(&:set).uniq
   88  			    player.opponents.each do |opponent|
   ..
   99  			    		offer_amount = player.currency * factors.values.inject(&:*)
  100  			    		if offer_amount > desirable_property.cost and player.currency >= offer_amount
  101: 							puts '[%s] Placing offer of £%d on %s (owned by %s) [%f]' % [ player.name, offer_amount, desirable_property.name, desirable_property.owner.name, factors.values.inject(&:*) * 100 ]
  102  
  103  				    		desirable_property.place_offer(player, offer_amount)
  ...
  117  				# Random element
  118  				factors[:random] = Random.rand(1..100)
  119: 				puts '[%s] Considering offer of £%d for %s (from %s) [%f]' % [ player.name, amount, property.name, proposer.name, ( factors.values.collect{ |f| ( 100 / factors.count ) * f }.inject(:+) / 100 ) ]
  120  				property.sell_to(proposer, amount) if Random.rand(1..100) > ( factors.values.collect{ |f| ( 100 / factors.count ) * f }.inject(:+) / 100 )
  121  			}

/Users/jd/git/personal/monotony/lib/monotony/chance.rb:
   12  			@action = Proc.new do |game, owner, player, property|
   13  				this_chance = game.chance
   14: 				puts '[%s] Drew a chance: %s' % [ player.name, this_chance ]
   15  
   16  				case this_chance
   ..
   18  				when 'Go back three spaces'
   19  					moved_to = player.move(-3)
   20: 					puts '[%s] Moved back to %s' % [ player.name, moved_to.name ]
   21  				when 'Take a trip to Marylebone Station'
   22  					player.move('Marylebone Station')

/Users/jd/git/personal/monotony/lib/monotony/communitychest.rb:
   12  			@action = Proc.new do |game, owner, player, property|
   13  				this_cc = game.community_chest
   14: 				puts '[%s] Drew a community chest: %s' % [ player.name, this_cc ]
   15  
   16  				case this_cc
   ..
   24  					player.in_jail = true
   25  					player.move('Jail')
   26: 					puts '[%s] Got sent to jail!' % player.name
   27  				when /Annuity matures/
   28  					game.pay_player(player, 150, 'annuity')

/Users/jd/git/personal/monotony/lib/monotony/game.rb:
  145  				worth = @players.collect { |p| '%s: £%d' % [ p.name, p.currency ]}
  146  				header << 'Balances: %s' % worth.join(', ')
  147: 				puts header
  148: 				puts
  149  
  150  				@board.each do |property|
  151  					if position % 10 == 0 and position > 0
  152: 						puts summary.collect! { |s| s << "\n" }
  153: 						puts
  154  
  155  						summary.collect! { '' }
  ...
  186  
  187  				summary_out = summary.collect! { |s| s << "\n" }
  188: 				puts summary_out
  189: 				puts
  190  				return summary_out
  191  			end
  ...
  212  				player.receive(amount)
  213  				@bank_balance = @bank_balance - amount unless player.respond_to? :is_simulation
  214: 				puts '[%s] Received £%d from bank%s (balance: £%d, bank balance: £%d)' % [ player.name, amount, (reason ? ' for %s' % reason : '' ), player.currency, bank_balance ]
  215  				true
  216  			else
  217  				player.receive(bank_balance)
  218: 				puts '[%s] Unable to receive £%d from bank! Received £%d instead (balance: £%d)' % [ player.name, amount, bank_balance, player.currency ]
  219  				@bank_balance = 0
  220  				false
  ...
  227  			payout = @free_parking_balance
  228  			player.receive(payout)
  229: 			puts '[%s] Landed on free parking! £%d treasure found' % [player.name, @free_parking_balance] unless @free_parking_balance == 0
  230  			@free_parking_balance = 0
  231  			payout
  ...
  257  
  258  			if @completed
  259: 				puts 'Game is complete!'
  260  				return false
  261  			end
  ...
  263  			turns.times do
  264  				@turn = @turn + 1
  265: 				puts '- Turn %d begins!' % @turn
  266  				@players.each do |turn|
  267  					if turn.is_out?
  268: 						puts '[%s] Is sitting out' % turn.name
  269  						next
  270  					end
  271: 					puts '[%s] Begins on %s (balance: £%d)' % [ turn.name , turn.current_square.name, turn.currency ]
  272  
  273  					turn.properties.each do |property|
  ...
  307  
  308  
  309: 					puts '[%s] Rolled %s (total: %d)' % [ turn.name, result.join(', '), move_total ]
  310: 					puts '[%s] Rolled a double' % turn.name if double
  311  
  312  					if turn.in_jail?
  313  						if double
  314: 							puts '[%s] Got out of jail! (rolled double)' % turn.name
  315  							turn.in_jail = false
  316  						else
  317  							turn.turns_in_jail = turn.turns_in_jail + 1
  318: 							puts '[%s] Is still in jail (turn %d)' % [ turn.name, turn.turns_in_jail ]
  319  							if turn.turns_in_jail >= @max_turns_in_jail
  320  								turn.in_jail = false
  321  								turn.pay(:free_parking, 50)
  322: 								puts '[%s] Got out of jail (paid out)' % turn.name
  323  							else 
  324  								next
  ...
  329  					square = turn.move(move_total)
  330  
  331: 					puts '[%s] Moved to %s' % [ turn.name, square.name ]
  332  					square.action.call(self, square.owner, turn, square)
  333  
  334: 					puts '[%s] Next throw' % turn.name if double
  335  					redo if double
  336: 					puts '[%s] Ended on %s (balance: £%d)' % [ turn.name, turn.current_square.name, turn.currency ]
  337  				end
  338  
  ...
  340  				if active_players.count == 1
  341  					winner = still_in.first
  342: 					puts '[%s] Won the game! Final balance: £%d, Property: %s' % [ winner.name, winner.currency, winner.properties.collect {|p| p.name} ]
  343  					@completed = true
  344  					break

/Users/jd/git/personal/monotony/lib/monotony/player.rb:
   91  				if n >= distance_to_go
   92  					unless in_jail?
   93: 						puts '[%s] Passed GO' % @name
   94  						@game.pay_player(self, @game.go_amount, 'passing go')
   95  					end
   ..
  119  		def bankrupt!(player = :bank)
  120  			if player == :bank
  121: 				puts '[%s] Bankrupt! Giving all assets to bank' % @name
  122  				@properties.each do |property|
  123  					property.owner = nil
  ...
  127  				@properties = []
  128  			else
  129: 				puts '[%s] Bankrupt! Giving all assets to %s' % [ @name, player.name ]
  130  				@properties.each { |p| p.owner = player }
  131: 				puts '[%s] Transferred properties to %s: %s' % [ @name, player.name, @properties.collect { |p| p.name }.join(', ') ]
  132  				player.properties.concat @properties unless player == nil
  133  				@properties = []
  ...
  142  			amount = amount.to_int
  143  
  144: 			puts '[%s] Has money trouble and is trying to raise £%d... (balance: £%d)' % [ @name, (amount - @currency), @currency ]
  145  			@behaviour[:money_trouble].call(game, self, amount)
  146  			@currency > amount
  ...
  149  		# Declares a player as out of the game.
  150  		def out!
  151: 			puts '[%s] is out of the game!' % @name
  152  			@in_game = false
  153  		end
  ...
  162  		def use_jail_card!
  163  			if @jail_free_cards > 0 and @in_jail
  164: 				puts "[%s] Used a 'get out of jail free' card!" % @name
  165  				@in_jail = false
  166  				@turns_in_jail = 0
  ...
  198  
  199  			if amount_to_pay < amount then			
  200: 				puts '[%s] Unable to pay £%d to %s%s! Paid £%d instead' % [ @name, amount, paying_to, ( description ? ' for %s' % description : '' ), amount_to_pay ]
  201  				bankrupt!(beneficiary)
  202  				false
  203  			else
  204: 				puts '[%s] Paid £%d to %s%s (balance: £%d)' % [ @name, amount, paying_to, ( description ? ' for %s' % description : '' ), @currency ]
  205  				true
  206  			end
  ...
  229  			best_fee = sorted_fees.last || [ 'null', 0 ]
  230  			worst_fee = sorted_fees.first || [ 'null', 0 ]
  231: 			puts '[%s] (AI) Forecast: Worst £%d %s (%s), Best £%d %s (%s), Average £%d %s on next roll' % [ @name, worst_fee[1].abs, (worst_fee[1].to_int > 0 ? 'up' : 'down'), worst_fee[0], best_fee[1].abs, (best_fee[1].to_int > 0 ? 'up' : 'down'), best_fee[0], (fees.values.inject(:+) / fees.values.size).to_int.abs, ((fees.values.inject(:+) / fees.values.size).to_int > 0 ? 'up' : 'down') ]
  232  			sorted_fees.collect { |f| - f[1] }
  233  		end

/Users/jd/git/personal/monotony/lib/monotony/purchasable.rb:
   31  			amount = amount.to_int
   32  			if player.currency < amount then
   33: 				puts '[%s] Unable to buy %s! (short of cash by £%d)' % [ player.name, @name, ( amount - player.currency ) ]
   34  				false
   35  			else
   ..
   38  				if @owner
   39  					owner.receive(amount)
   40: 					puts '[%s] Sold %s%s to %s for £%d (new balance: £%d)' % [ @owner.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), player.name, amount, @owner.currency ]
   41  					@owner.properties.delete self
   42  				else
   43: 					puts '[%s] Purchased %s%s for £%d (new balance: £%d)' % [ player.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), amount, player.currency ]
   44  				end
   45  
   ..
   97  		# Gives a property to another player. Available for use as part of a trading behaviour.
   98  		def give_to(player)
   99: 			puts '[%s] Gave %s to %s' % [ @owner.name, @name, player.name ]
  100  			@owner.properties.delete self
  101  			@owner = player
  ...
  107  		def mortgage
  108  			unless is_mortgaged?
  109: 				puts '[%s] Mortgaged %s for £%d' % [ @owner.name, @name, @mortgage_value ]
  110  				@is_mortgaged = true
  111  				@owner.receive(@mortgage_value)
  ...
  120  			if is_mortgaged?
  121  				if @owner.currency > cost
  122: 					puts '[%s] Unmortgaged %s for £%d' % [ @owner.name, @name, cost ]
  123  					@owner.deduct(cost)
  124  					@is_mortgaged = false
  125  				else
  126: 					puts '[%s] Unable to unmortgage %s (not enough funds)' % [ @owner.name, @name ]
  127  				end
  128  			else
  129: 				puts '[%] Tried to unmortgage a non-mortgaged property (%s)' % [ @owner.name, @name ]
  130  			end
  131  			self

/Users/jd/git/personal/monotony/lib/monotony/variants.rb:
  328  					player.in_jail = true
  329  					player.move('Jail')
  330: 					puts '[%s] Got sent to jail!' % player.name
  331  				}
  332  			),

48 matches across 7 files


Searching 17 files for "puts"

/Users/jd/git/personal/monotony/lib/monotony/chance.rb:
   12  			@action = Proc.new do |game, owner, player, property|
   13  				this_chance = game.chance
   14: 				puts '[%s] Drew a chance: %s' % [ player.name, this_chance ]
   15  
   16  				case this_chance
   ..
   18  				when 'Go back three spaces'
   19  					moved_to = player.move(-3)
   20: 					puts '[%s] Moved back to %s' % [ player.name, moved_to.name ]
   21  				when 'Take a trip to Marylebone Station'
   22  					player.move('Marylebone Station')

/Users/jd/git/personal/monotony/lib/monotony/communitychest.rb:
   12  			@action = Proc.new do |game, owner, player, property|
   13  				this_cc = game.community_chest
   14: 				puts '[%s] Drew a community chest: %s' % [ player.name, this_cc ]
   15  
   16  				case this_cc
   ..
   24  					player.in_jail = true
   25  					player.move('Jail')
   26: 					puts '[%s] Got sent to jail!' % player.name
   27  				when /Annuity matures/
   28  					game.pay_player(player, 150, 'annuity')

/Users/jd/git/personal/monotony/lib/monotony/game.rb:
  145  				worth = @players.collect { |p| '%s: £%d' % [ p.name, p.currency ]}
  146  				header << 'Balances: %s' % worth.join(', ')
  147: 				puts header
  148: 				puts
  149  
  150  				@board.each do |property|
  151  					if position % 10 == 0 and position > 0
  152: 						puts summary.collect! { |s| s << "\n" }
  153: 						puts
  154  
  155  						summary.collect! { '' }
  ...
  186  
  187  				summary_out = summary.collect! { |s| s << "\n" }
  188: 				puts summary_out
  189: 				puts
  190  				return summary_out
  191  			end
  ...
  212  				player.receive(amount)
  213  				@bank_balance = @bank_balance - amount unless player.respond_to? :is_simulation
  214: 				puts '[%s] Received £%d from bank%s (balance: £%d, bank balance: £%d)' % [ player.name, amount, (reason ? ' for %s' % reason : '' ), player.currency, bank_balance ]
  215  				true
  216  			else
  217  				player.receive(bank_balance)
  218: 				puts '[%s] Unable to receive £%d from bank! Received £%d instead (balance: £%d)' % [ player.name, amount, bank_balance, player.currency ]
  219  				@bank_balance = 0
  220  				false
  ...
  227  			payout = @free_parking_balance
  228  			player.receive(payout)
  229: 			puts '[%s] Landed on free parking! £%d treasure found' % [player.name, @free_parking_balance] unless @free_parking_balance == 0
  230  			@free_parking_balance = 0
  231  			payout
  ...
  257  
  258  			if @completed
  259: 				puts 'Game is complete!'
  260  				return false
  261  			end
  ...
  263  			turns.times do
  264  				@turn = @turn + 1
  265: 				puts '- Turn %d begins!' % @turn
  266  				@players.each do |turn|
  267  					if turn.is_out?
  268: 						puts '[%s] Is sitting out' % turn.name
  269  						next
  270  					end
  271: 					puts '[%s] Begins on %s (balance: £%d)' % [ turn.name , turn.current_square.name, turn.currency ]
  272  
  273  					turn.properties.each do |property|
  ...
  307  
  308  
  309: 					puts '[%s] Rolled %s (total: %d)' % [ turn.name, result.join(', '), move_total ]
  310: 					puts '[%s] Rolled a double' % turn.name if double
  311  
  312  					if turn.in_jail?
  313  						if double
  314: 							puts '[%s] Got out of jail! (rolled double)' % turn.name
  315  							turn.in_jail = false
  316  						else
  317  							turn.turns_in_jail = turn.turns_in_jail + 1
  318: 							puts '[%s] Is still in jail (turn %d)' % [ turn.name, turn.turns_in_jail ]
  319  							if turn.turns_in_jail >= @max_turns_in_jail
  320  								turn.in_jail = false
  321  								turn.pay(:free_parking, 50)
  322: 								puts '[%s] Got out of jail (paid out)' % turn.name
  323  							else 
  324  								next
  ...
  329  					square = turn.move(move_total)
  330  
  331: 					puts '[%s] Moved to %s' % [ turn.name, square.name ]
  332  					square.action.call(self, square.owner, turn, square)
  333  
  334: 					puts '[%s] Next throw' % turn.name if double
  335  					redo if double
  336: 					puts '[%s] Ended on %s (balance: £%d)' % [ turn.name, turn.current_square.name, turn.currency ]
  337  				end
  338  
  ...
  340  				if active_players.count == 1
  341  					winner = still_in.first
  342: 					puts '[%s] Won the game! Final balance: £%d, Property: %s' % [ winner.name, winner.currency, winner.properties.collect {|p| p.name} ]
  343  					@completed = true
  344  					break

/Users/jd/git/personal/monotony/lib/monotony/player.rb:
   91  				if n >= distance_to_go
   92  					unless in_jail?
   93: 						puts '[%s] Passed GO' % @name
   94  						@game.pay_player(self, @game.go_amount, 'passing go')
   95  					end
   ..
  119  		def bankrupt!(player = :bank)
  120  			if player == :bank
  121: 				puts '[%s] Bankrupt! Giving all assets to bank' % @name
  122  				@properties.each do |property|
  123  					property.owner = nil
  ...
  127  				@properties = []
  128  			else
  129: 				puts '[%s] Bankrupt! Giving all assets to %s' % [ @name, player.name ]
  130  				@properties.each { |p| p.owner = player }
  131: 				puts '[%s] Transferred properties to %s: %s' % [ @name, player.name, @properties.collect { |p| p.name }.join(', ') ]
  132  				player.properties.concat @properties unless player == nil
  133  				@properties = []
  ...
  142  			amount = amount.to_int
  143  
  144: 			puts '[%s] Has money trouble and is trying to raise £%d... (balance: £%d)' % [ @name, (amount - @currency), @currency ]
  145  			@behaviour[:money_trouble].call(game, self, amount)
  146  			@currency > amount
  ...
  149  		# Declares a player as out of the game.
  150  		def out!
  151: 			puts '[%s] is out of the game!' % @name
  152  			@in_game = false
  153  		end
  ...
  162  		def use_jail_card!
  163  			if @jail_free_cards > 0 and @in_jail
  164: 				puts "[%s] Used a 'get out of jail free' card!" % @name
  165  				@in_jail = false
  166  				@turns_in_jail = 0
  ...
  198  
  199  			if amount_to_pay < amount then			
  200: 				puts '[%s] Unable to pay £%d to %s%s! Paid £%d instead' % [ @name, amount, paying_to, ( description ? ' for %s' % description : '' ), amount_to_pay ]
  201  				bankrupt!(beneficiary)
  202  				false
  203  			else
  204: 				puts '[%s] Paid £%d to %s%s (balance: £%d)' % [ @name, amount, paying_to, ( description ? ' for %s' % description : '' ), @currency ]
  205  				true
  206  			end
  ...
  229  			best_fee = sorted_fees.last || [ 'null', 0 ]
  230  			worst_fee = sorted_fees.first || [ 'null', 0 ]
  231: 			puts '[%s] (AI) Forecast: Worst £%d %s (%s), Best £%d %s (%s), Average £%d %s on next roll' % [ @name, worst_fee[1].abs, (worst_fee[1].to_int > 0 ? 'up' : 'down'), worst_fee[0], best_fee[1].abs, (best_fee[1].to_int > 0 ? 'up' : 'down'), best_fee[0], (fees.values.inject(:+) / fees.values.size).to_int.abs, ((fees.values.inject(:+) / fees.values.size).to_int > 0 ? 'up' : 'down') ]
  232  			sorted_fees.collect { |f| - f[1] }
  233  		end

/Users/jd/git/personal/monotony/lib/monotony/purchasable.rb:
   31  			amount = amount.to_int
   32  			if player.currency < amount then
   33: 				puts '[%s] Unable to buy %s! (short of cash by £%d)' % [ player.name, @name, ( amount - player.currency ) ]
   34  				false
   35  			else
   ..
   38  				if @owner
   39  					owner.receive(amount)
   40: 					puts '[%s] Sold %s%s to %s for £%d (new balance: £%d)' % [ @owner.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), player.name, amount, @owner.currency ]
   41  					@owner.properties.delete self
   42  				else
   43: 					puts '[%s] Purchased %s%s for £%d (new balance: £%d)' % [ player.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), amount, player.currency ]
   44  				end
   45  
   ..
   97  		# Gives a property to another player. Available for use as part of a trading behaviour.
   98  		def give_to(player)
   99: 			puts '[%s] Gave %s to %s' % [ @owner.name, @name, player.name ]
  100  			@owner.properties.delete self
  101  			@owner = player
  ...
  107  		def mortgage
  108  			unless is_mortgaged?
  109: 				puts '[%s] Mortgaged %s for £%d' % [ @owner.name, @name, @mortgage_value ]
  110  				@is_mortgaged = true
  111  				@owner.receive(@mortgage_value)
  ...
  120  			if is_mortgaged?
  121  				if @owner.currency > cost
  122: 					puts '[%s] Unmortgaged %s for £%d' % [ @owner.name, @name, cost ]
  123  					@owner.deduct(cost)
  124  					@is_mortgaged = false
  125  				else
  126: 					puts '[%s] Unable to unmortgage %s (not enough funds)' % [ @owner.name, @name ]
  127  				end
  128  			else
  129: 				puts '[%] Tried to unmortgage a non-mortgaged property (%s)' % [ @owner.name, @name ]
  130  			end
  131  			self

/Users/jd/git/personal/monotony/lib/monotony/variants.rb:
  328  					player.in_jail = true
  329  					player.move('Jail')
  330: 					puts '[%s] Got sent to jail!' % player.name
  331  				}
  332  			),

45 matches across 6 files


Searching 17 files for "puts"

/Users/jd/git/personal/monotony/lib/monotony/communitychest.rb:
   12  			@action = Proc.new do |game, owner, player, property|
   13  				this_cc = game.community_chest
   14: 				puts '[%s] Drew a community chest: %s' % [ player.name, this_cc ]
   15  
   16  				case this_cc
   ..
   24  					player.in_jail = true
   25  					player.move('Jail')
   26: 					puts '[%s] Got sent to jail!' % player.name
   27  				when /Annuity matures/
   28  					game.pay_player(player, 150, 'annuity')

/Users/jd/git/personal/monotony/lib/monotony/game.rb:
  145  				worth = @players.collect { |p| '%s: £%d' % [ p.name, p.currency ]}
  146  				header << 'Balances: %s' % worth.join(', ')
  147: 				puts header
  148: 				puts
  149  
  150  				@board.each do |property|
  151  					if position % 10 == 0 and position > 0
  152: 						puts summary.collect! { |s| s << "\n" }
  153: 						puts
  154  
  155  						summary.collect! { '' }
  ...
  186  
  187  				summary_out = summary.collect! { |s| s << "\n" }
  188: 				puts summary_out
  189: 				puts
  190  				return summary_out
  191  			end
  ...
  212  				player.receive(amount)
  213  				@bank_balance = @bank_balance - amount unless player.respond_to? :is_simulation
  214: 				puts '[%s] Received £%d from bank%s (balance: £%d, bank balance: £%d)' % [ player.name, amount, (reason ? ' for %s' % reason : '' ), player.currency, bank_balance ]
  215  				true
  216  			else
  217  				player.receive(bank_balance)
  218: 				puts '[%s] Unable to receive £%d from bank! Received £%d instead (balance: £%d)' % [ player.name, amount, bank_balance, player.currency ]
  219  				@bank_balance = 0
  220  				false
  ...
  227  			payout = @free_parking_balance
  228  			player.receive(payout)
  229: 			puts '[%s] Landed on free parking! £%d treasure found' % [player.name, @free_parking_balance] unless @free_parking_balance == 0
  230  			@free_parking_balance = 0
  231  			payout
  ...
  257  
  258  			if @completed
  259: 				puts 'Game is complete!'
  260  				return false
  261  			end
  ...
  263  			turns.times do
  264  				@turn = @turn + 1
  265: 				puts '- Turn %d begins!' % @turn
  266  				@players.each do |turn|
  267  					if turn.is_out?
  268: 						puts '[%s] Is sitting out' % turn.name
  269  						next
  270  					end
  271: 					puts '[%s] Begins on %s (balance: £%d)' % [ turn.name , turn.current_square.name, turn.currency ]
  272  
  273  					turn.properties.each do |property|
  ...
  307  
  308  
  309: 					puts '[%s] Rolled %s (total: %d)' % [ turn.name, result.join(', '), move_total ]
  310: 					puts '[%s] Rolled a double' % turn.name if double
  311  
  312  					if turn.in_jail?
  313  						if double
  314: 							puts '[%s] Got out of jail! (rolled double)' % turn.name
  315  							turn.in_jail = false
  316  						else
  317  							turn.turns_in_jail = turn.turns_in_jail + 1
  318: 							puts '[%s] Is still in jail (turn %d)' % [ turn.name, turn.turns_in_jail ]
  319  							if turn.turns_in_jail >= @max_turns_in_jail
  320  								turn.in_jail = false
  321  								turn.pay(:free_parking, 50)
  322: 								puts '[%s] Got out of jail (paid out)' % turn.name
  323  							else 
  324  								next
  ...
  329  					square = turn.move(move_total)
  330  
  331: 					puts '[%s] Moved to %s' % [ turn.name, square.name ]
  332  					square.action.call(self, square.owner, turn, square)
  333  
  334: 					puts '[%s] Next throw' % turn.name if double
  335  					redo if double
  336: 					puts '[%s] Ended on %s (balance: £%d)' % [ turn.name, turn.current_square.name, turn.currency ]
  337  				end
  338  
  ...
  340  				if active_players.count == 1
  341  					winner = still_in.first
  342: 					puts '[%s] Won the game! Final balance: £%d, Property: %s' % [ winner.name, winner.currency, winner.properties.collect {|p| p.name} ]
  343  					@completed = true
  344  					break

/Users/jd/git/personal/monotony/lib/monotony/player.rb:
   91  				if n >= distance_to_go
   92  					unless in_jail?
   93: 						puts '[%s] Passed GO' % @name
   94  						@game.pay_player(self, @game.go_amount, 'passing go')
   95  					end
   ..
  119  		def bankrupt!(player = :bank)
  120  			if player == :bank
  121: 				puts '[%s] Bankrupt! Giving all assets to bank' % @name
  122  				@properties.each do |property|
  123  					property.owner = nil
  ...
  127  				@properties = []
  128  			else
  129: 				puts '[%s] Bankrupt! Giving all assets to %s' % [ @name, player.name ]
  130  				@properties.each { |p| p.owner = player }
  131: 				puts '[%s] Transferred properties to %s: %s' % [ @name, player.name, @properties.collect { |p| p.name }.join(', ') ]
  132  				player.properties.concat @properties unless player == nil
  133  				@properties = []
  ...
  142  			amount = amount.to_int
  143  
  144: 			puts '[%s] Has money trouble and is trying to raise £%d... (balance: £%d)' % [ @name, (amount - @currency), @currency ]
  145  			@behaviour[:money_trouble].call(game, self, amount)
  146  			@currency > amount
  ...
  149  		# Declares a player as out of the game.
  150  		def out!
  151: 			puts '[%s] is out of the game!' % @name
  152  			@in_game = false
  153  		end
  ...
  162  		def use_jail_card!
  163  			if @jail_free_cards > 0 and @in_jail
  164: 				puts "[%s] Used a 'get out of jail free' card!" % @name
  165  				@in_jail = false
  166  				@turns_in_jail = 0
  ...
  198  
  199  			if amount_to_pay < amount then			
  200: 				puts '[%s] Unable to pay £%d to %s%s! Paid £%d instead' % [ @name, amount, paying_to, ( description ? ' for %s' % description : '' ), amount_to_pay ]
  201  				bankrupt!(beneficiary)
  202  				false
  203  			else
  204: 				puts '[%s] Paid £%d to %s%s (balance: £%d)' % [ @name, amount, paying_to, ( description ? ' for %s' % description : '' ), @currency ]
  205  				true
  206  			end
  ...
  229  			best_fee = sorted_fees.last || [ 'null', 0 ]
  230  			worst_fee = sorted_fees.first || [ 'null', 0 ]
  231: 			puts '[%s] (AI) Forecast: Worst £%d %s (%s), Best £%d %s (%s), Average £%d %s on next roll' % [ @name, worst_fee[1].abs, (worst_fee[1].to_int > 0 ? 'up' : 'down'), worst_fee[0], best_fee[1].abs, (best_fee[1].to_int > 0 ? 'up' : 'down'), best_fee[0], (fees.values.inject(:+) / fees.values.size).to_int.abs, ((fees.values.inject(:+) / fees.values.size).to_int > 0 ? 'up' : 'down') ]
  232  			sorted_fees.collect { |f| - f[1] }
  233  		end

/Users/jd/git/personal/monotony/lib/monotony/purchasable.rb:
   31  			amount = amount.to_int
   32  			if player.currency < amount then
   33: 				puts '[%s] Unable to buy %s! (short of cash by £%d)' % [ player.name, @name, ( amount - player.currency ) ]
   34  				false
   35  			else
   ..
   38  				if @owner
   39  					owner.receive(amount)
   40: 					puts '[%s] Sold %s%s to %s for £%d (new balance: £%d)' % [ @owner.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), player.name, amount, @owner.currency ]
   41  					@owner.properties.delete self
   42  				else
   43: 					puts '[%s] Purchased %s%s for £%d (new balance: £%d)' % [ player.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), amount, player.currency ]
   44  				end
   45  
   ..
   97  		# Gives a property to another player. Available for use as part of a trading behaviour.
   98  		def give_to(player)
   99: 			puts '[%s] Gave %s to %s' % [ @owner.name, @name, player.name ]
  100  			@owner.properties.delete self
  101  			@owner = player
  ...
  107  		def mortgage
  108  			unless is_mortgaged?
  109: 				puts '[%s] Mortgaged %s for £%d' % [ @owner.name, @name, @mortgage_value ]
  110  				@is_mortgaged = true
  111  				@owner.receive(@mortgage_value)
  ...
  120  			if is_mortgaged?
  121  				if @owner.currency > cost
  122: 					puts '[%s] Unmortgaged %s for £%d' % [ @owner.name, @name, cost ]
  123  					@owner.deduct(cost)
  124  					@is_mortgaged = false
  125  				else
  126: 					puts '[%s] Unable to unmortgage %s (not enough funds)' % [ @owner.name, @name ]
  127  				end
  128  			else
  129: 				puts '[%] Tried to unmortgage a non-mortgaged property (%s)' % [ @owner.name, @name ]
  130  			end
  131  			self

/Users/jd/git/personal/monotony/lib/monotony/variants.rb:
  328  					player.in_jail = true
  329  					player.move('Jail')
  330: 					puts '[%s] Got sent to jail!' % player.name
  331  				}
  332  			),

43 matches across 5 files


Searching 17 files for "puts"

/Users/jd/git/personal/monotony/lib/monotony/game.rb:
  145  				worth = @players.collect { |p| '%s: £%d' % [ p.name, p.currency ]}
  146  				header << 'Balances: %s' % worth.join(', ')
  147: 				puts header
  148: 				puts
  149  
  150  				@board.each do |property|
  151  					if position % 10 == 0 and position > 0
  152: 						puts summary.collect! { |s| s << "\n" }
  153: 						puts
  154  
  155  						summary.collect! { '' }
  ...
  186  
  187  				summary_out = summary.collect! { |s| s << "\n" }
  188: 				puts summary_out
  189: 				puts
  190  				return summary_out
  191  			end
  ...
  212  				player.receive(amount)
  213  				@bank_balance = @bank_balance - amount unless player.respond_to? :is_simulation
  214: 				puts '[%s] Received £%d from bank%s (balance: £%d, bank balance: £%d)' % [ player.name, amount, (reason ? ' for %s' % reason : '' ), player.currency, bank_balance ]
  215  				true
  216  			else
  217  				player.receive(bank_balance)
  218: 				puts '[%s] Unable to receive £%d from bank! Received £%d instead (balance: £%d)' % [ player.name, amount, bank_balance, player.currency ]
  219  				@bank_balance = 0
  220  				false
  ...
  227  			payout = @free_parking_balance
  228  			player.receive(payout)
  229: 			puts '[%s] Landed on free parking! £%d treasure found' % [player.name, @free_parking_balance] unless @free_parking_balance == 0
  230  			@free_parking_balance = 0
  231  			payout
  ...
  257  
  258  			if @completed
  259: 				puts 'Game is complete!'
  260  				return false
  261  			end
  ...
  263  			turns.times do
  264  				@turn = @turn + 1
  265: 				puts '- Turn %d begins!' % @turn
  266  				@players.each do |turn|
  267  					if turn.is_out?
  268: 						puts '[%s] Is sitting out' % turn.name
  269  						next
  270  					end
  271: 					puts '[%s] Begins on %s (balance: £%d)' % [ turn.name , turn.current_square.name, turn.currency ]
  272  
  273  					turn.properties.each do |property|
  ...
  307  
  308  
  309: 					puts '[%s] Rolled %s (total: %d)' % [ turn.name, result.join(', '), move_total ]
  310: 					puts '[%s] Rolled a double' % turn.name if double
  311  
  312  					if turn.in_jail?
  313  						if double
  314: 							puts '[%s] Got out of jail! (rolled double)' % turn.name
  315  							turn.in_jail = false
  316  						else
  317  							turn.turns_in_jail = turn.turns_in_jail + 1
  318: 							puts '[%s] Is still in jail (turn %d)' % [ turn.name, turn.turns_in_jail ]
  319  							if turn.turns_in_jail >= @max_turns_in_jail
  320  								turn.in_jail = false
  321  								turn.pay(:free_parking, 50)
  322: 								puts '[%s] Got out of jail (paid out)' % turn.name
  323  							else 
  324  								next
  ...
  329  					square = turn.move(move_total)
  330  
  331: 					puts '[%s] Moved to %s' % [ turn.name, square.name ]
  332  					square.action.call(self, square.owner, turn, square)
  333  
  334: 					puts '[%s] Next throw' % turn.name if double
  335  					redo if double
  336: 					puts '[%s] Ended on %s (balance: £%d)' % [ turn.name, turn.current_square.name, turn.currency ]
  337  				end
  338  
  ...
  340  				if active_players.count == 1
  341  					winner = still_in.first
  342: 					puts '[%s] Won the game! Final balance: £%d, Property: %s' % [ winner.name, winner.currency, winner.properties.collect {|p| p.name} ]
  343  					@completed = true
  344  					break

/Users/jd/git/personal/monotony/lib/monotony/player.rb:
   91  				if n >= distance_to_go
   92  					unless in_jail?
   93: 						puts '[%s] Passed GO' % @name
   94  						@game.pay_player(self, @game.go_amount, 'passing go')
   95  					end
   ..
  119  		def bankrupt!(player = :bank)
  120  			if player == :bank
  121: 				puts '[%s] Bankrupt! Giving all assets to bank' % @name
  122  				@properties.each do |property|
  123  					property.owner = nil
  ...
  127  				@properties = []
  128  			else
  129: 				puts '[%s] Bankrupt! Giving all assets to %s' % [ @name, player.name ]
  130  				@properties.each { |p| p.owner = player }
  131: 				puts '[%s] Transferred properties to %s: %s' % [ @name, player.name, @properties.collect { |p| p.name }.join(', ') ]
  132  				player.properties.concat @properties unless player == nil
  133  				@properties = []
  ...
  142  			amount = amount.to_int
  143  
  144: 			puts '[%s] Has money trouble and is trying to raise £%d... (balance: £%d)' % [ @name, (amount - @currency), @currency ]
  145  			@behaviour[:money_trouble].call(game, self, amount)
  146  			@currency > amount
  ...
  149  		# Declares a player as out of the game.
  150  		def out!
  151: 			puts '[%s] is out of the game!' % @name
  152  			@in_game = false
  153  		end
  ...
  162  		def use_jail_card!
  163  			if @jail_free_cards > 0 and @in_jail
  164: 				puts "[%s] Used a 'get out of jail free' card!" % @name
  165  				@in_jail = false
  166  				@turns_in_jail = 0
  ...
  198  
  199  			if amount_to_pay < amount then			
  200: 				puts '[%s] Unable to pay £%d to %s%s! Paid £%d instead' % [ @name, amount, paying_to, ( description ? ' for %s' % description : '' ), amount_to_pay ]
  201  				bankrupt!(beneficiary)
  202  				false
  203  			else
  204: 				puts '[%s] Paid £%d to %s%s (balance: £%d)' % [ @name, amount, paying_to, ( description ? ' for %s' % description : '' ), @currency ]
  205  				true
  206  			end
  ...
  229  			best_fee = sorted_fees.last || [ 'null', 0 ]
  230  			worst_fee = sorted_fees.first || [ 'null', 0 ]
  231: 			puts '[%s] (AI) Forecast: Worst £%d %s (%s), Best £%d %s (%s), Average £%d %s on next roll' % [ @name, worst_fee[1].abs, (worst_fee[1].to_int > 0 ? 'up' : 'down'), worst_fee[0], best_fee[1].abs, (best_fee[1].to_int > 0 ? 'up' : 'down'), best_fee[0], (fees.values.inject(:+) / fees.values.size).to_int.abs, ((fees.values.inject(:+) / fees.values.size).to_int > 0 ? 'up' : 'down') ]
  232  			sorted_fees.collect { |f| - f[1] }
  233  		end

/Users/jd/git/personal/monotony/lib/monotony/purchasable.rb:
   31  			amount = amount.to_int
   32  			if player.currency < amount then
   33: 				puts '[%s] Unable to buy %s! (short of cash by £%d)' % [ player.name, @name, ( amount - player.currency ) ]
   34  				false
   35  			else
   ..
   38  				if @owner
   39  					owner.receive(amount)
   40: 					puts '[%s] Sold %s%s to %s for £%d (new balance: £%d)' % [ @owner.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), player.name, amount, @owner.currency ]
   41  					@owner.properties.delete self
   42  				else
   43: 					puts '[%s] Purchased %s%s for £%d (new balance: £%d)' % [ player.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), amount, player.currency ]
   44  				end
   45  
   ..
   97  		# Gives a property to another player. Available for use as part of a trading behaviour.
   98  		def give_to(player)
   99: 			puts '[%s] Gave %s to %s' % [ @owner.name, @name, player.name ]
  100  			@owner.properties.delete self
  101  			@owner = player
  ...
  107  		def mortgage
  108  			unless is_mortgaged?
  109: 				puts '[%s] Mortgaged %s for £%d' % [ @owner.name, @name, @mortgage_value ]
  110  				@is_mortgaged = true
  111  				@owner.receive(@mortgage_value)
  ...
  120  			if is_mortgaged?
  121  				if @owner.currency > cost
  122: 					puts '[%s] Unmortgaged %s for £%d' % [ @owner.name, @name, cost ]
  123  					@owner.deduct(cost)
  124  					@is_mortgaged = false
  125  				else
  126: 					puts '[%s] Unable to unmortgage %s (not enough funds)' % [ @owner.name, @name ]
  127  				end
  128  			else
  129: 				puts '[%] Tried to unmortgage a non-mortgaged property (%s)' % [ @owner.name, @name ]
  130  			end
  131  			self

/Users/jd/git/personal/monotony/lib/monotony/variants.rb:
  328  					player.in_jail = true
  329  					player.move('Jail')
  330: 					puts '[%s] Got sent to jail!' % player.name
  331  				}
  332  			),

41 matches across 4 files


Searching 17 files for "puts"

/Users/jd/git/personal/monotony/lib/monotony/game.rb:
  145  				worth = @players.collect { |p| '%s: £%d' % [ p.name, p.currency ]}
  146  				header << 'Balances: %s' % worth.join(', ')
  147: 				puts header
  148: 				puts
  149  
  150  				@board.each do |property|
  151  					if position % 10 == 0 and position > 0
  152: 						puts summary.collect! { |s| s << "\n" }
  153: 						puts
  154  
  155  						summary.collect! { '' }
  ...
  186  
  187  				summary_out = summary.collect! { |s| s << "\n" }
  188: 				puts summary_out
  189: 				puts
  190  				return summary_out
  191  			end
  ...
  269  						next
  270  					end
  271: 					puts '[%s] Begins on %s (balance: £%d)' % [ turn.name , turn.current_square.name, turn.currency ]
  272  
  273  					turn.properties.each do |property|

/Users/jd/git/personal/monotony/lib/monotony/player.rb:
   91  				if n >= distance_to_go
   92  					unless in_jail?
   93: 						puts '[%s] Passed GO' % @name
   94  						@game.pay_player(self, @game.go_amount, 'passing go')
   95  					end
   ..
  119  		def bankrupt!(player = :bank)
  120  			if player == :bank
  121: 				puts '[%s] Bankrupt! Giving all assets to bank' % @name
  122  				@properties.each do |property|
  123  					property.owner = nil
  ...
  127  				@properties = []
  128  			else
  129: 				puts '[%s] Bankrupt! Giving all assets to %s' % [ @name, player.name ]
  130  				@properties.each { |p| p.owner = player }
  131: 				puts '[%s] Transferred properties to %s: %s' % [ @name, player.name, @properties.collect { |p| p.name }.join(', ') ]
  132  				player.properties.concat @properties unless player == nil
  133  				@properties = []
  ...
  142  			amount = amount.to_int
  143  
  144: 			puts '[%s] Has money trouble and is trying to raise £%d... (balance: £%d)' % [ @name, (amount - @currency), @currency ]
  145  			@behaviour[:money_trouble].call(game, self, amount)
  146  			@currency > amount
  ...
  149  		# Declares a player as out of the game.
  150  		def out!
  151: 			puts '[%s] is out of the game!' % @name
  152  			@in_game = false
  153  		end
  ...
  162  		def use_jail_card!
  163  			if @jail_free_cards > 0 and @in_jail
  164: 				puts "[%s] Used a 'get out of jail free' card!" % @name
  165  				@in_jail = false
  166  				@turns_in_jail = 0
  ...
  198  
  199  			if amount_to_pay < amount then			
  200: 				puts '[%s] Unable to pay £%d to %s%s! Paid £%d instead' % [ @name, amount, paying_to, ( description ? ' for %s' % description : '' ), amount_to_pay ]
  201  				bankrupt!(beneficiary)
  202  				false
  203  			else
  204: 				puts '[%s] Paid £%d to %s%s (balance: £%d)' % [ @name, amount, paying_to, ( description ? ' for %s' % description : '' ), @currency ]
  205  				true
  206  			end
  ...
  229  			best_fee = sorted_fees.last || [ 'null', 0 ]
  230  			worst_fee = sorted_fees.first || [ 'null', 0 ]
  231: 			puts '[%s] (AI) Forecast: Worst £%d %s (%s), Best £%d %s (%s), Average £%d %s on next roll' % [ @name, worst_fee[1].abs, (worst_fee[1].to_int > 0 ? 'up' : 'down'), worst_fee[0], best_fee[1].abs, (best_fee[1].to_int > 0 ? 'up' : 'down'), best_fee[0], (fees.values.inject(:+) / fees.values.size).to_int.abs, ((fees.values.inject(:+) / fees.values.size).to_int > 0 ? 'up' : 'down') ]
  232  			sorted_fees.collect { |f| - f[1] }
  233  		end

/Users/jd/git/personal/monotony/lib/monotony/purchasable.rb:
   31  			amount = amount.to_int
   32  			if player.currency < amount then
   33: 				puts '[%s] Unable to buy %s! (short of cash by £%d)' % [ player.name, @name, ( amount - player.currency ) ]
   34  				false
   35  			else
   ..
   38  				if @owner
   39  					owner.receive(amount)
   40: 					puts '[%s] Sold %s%s to %s for £%d (new balance: £%d)' % [ @owner.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), player.name, amount, @owner.currency ]
   41  					@owner.properties.delete self
   42  				else
   43: 					puts '[%s] Purchased %s%s for £%d (new balance: £%d)' % [ player.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), amount, player.currency ]
   44  				end
   45  
   ..
   97  		# Gives a property to another player. Available for use as part of a trading behaviour.
   98  		def give_to(player)
   99: 			puts '[%s] Gave %s to %s' % [ @owner.name, @name, player.name ]
  100  			@owner.properties.delete self
  101  			@owner = player
  ...
  107  		def mortgage
  108  			unless is_mortgaged?
  109: 				puts '[%s] Mortgaged %s for £%d' % [ @owner.name, @name, @mortgage_value ]
  110  				@is_mortgaged = true
  111  				@owner.receive(@mortgage_value)
  ...
  120  			if is_mortgaged?
  121  				if @owner.currency > cost
  122: 					puts '[%s] Unmortgaged %s for £%d' % [ @owner.name, @name, cost ]
  123  					@owner.deduct(cost)
  124  					@is_mortgaged = false
  125  				else
  126: 					puts '[%s] Unable to unmortgage %s (not enough funds)' % [ @owner.name, @name ]
  127  				end
  128  			else
  129: 				puts '[%] Tried to unmortgage a non-mortgaged property (%s)' % [ @owner.name, @name ]
  130  			end
  131  			self

/Users/jd/git/personal/monotony/lib/monotony/variants.rb:
  328  					player.in_jail = true
  329  					player.move('Jail')
  330: 					puts '[%s] Got sent to jail!' % player.name
  331  				}
  332  			),

26 matches across 4 files


Searching 17 files for "puts"

/Users/jd/git/personal/monotony/lib/monotony/game.rb:
  145  				worth = @players.collect { |p| '%s: £%d' % [ p.name, p.currency ]}
  146  				header << 'Balances: %s' % worth.join(', ')
  147: 				puts header
  148: 				puts
  149  
  150  				@board.each do |property|
  151  					if position % 10 == 0 and position > 0
  152: 						puts summary.collect! { |s| s << "\n" }
  153: 						puts
  154  
  155  						summary.collect! { '' }
  ...
  186  
  187  				summary_out = summary.collect! { |s| s << "\n" }
  188: 				puts summary_out
  189: 				puts
  190  				return summary_out
  191  			end

/Users/jd/git/personal/monotony/lib/monotony/player.rb:
   91  				if n >= distance_to_go
   92  					unless in_jail?
   93: 						puts '[%s] Passed GO' % @name
   94  						@game.pay_player(self, @game.go_amount, 'passing go')
   95  					end
   ..
  119  		def bankrupt!(player = :bank)
  120  			if player == :bank
  121: 				puts '[%s] Bankrupt! Giving all assets to bank' % @name
  122  				@properties.each do |property|
  123  					property.owner = nil
  ...
  127  				@properties = []
  128  			else
  129: 				puts '[%s] Bankrupt! Giving all assets to %s' % [ @name, player.name ]
  130  				@properties.each { |p| p.owner = player }
  131: 				puts '[%s] Transferred properties to %s: %s' % [ @name, player.name, @properties.collect { |p| p.name }.join(', ') ]
  132  				player.properties.concat @properties unless player == nil
  133  				@properties = []
  ...
  142  			amount = amount.to_int
  143  
  144: 			puts '[%s] Has money trouble and is trying to raise £%d... (balance: £%d)' % [ @name, (amount - @currency), @currency ]
  145  			@behaviour[:money_trouble].call(game, self, amount)
  146  			@currency > amount
  ...
  149  		# Declares a player as out of the game.
  150  		def out!
  151: 			puts '[%s] is out of the game!' % @name
  152  			@in_game = false
  153  		end
  ...
  162  		def use_jail_card!
  163  			if @jail_free_cards > 0 and @in_jail
  164: 				puts "[%s] Used a 'get out of jail free' card!" % @name
  165  				@in_jail = false
  166  				@turns_in_jail = 0
  ...
  198  
  199  			if amount_to_pay < amount then			
  200: 				puts '[%s] Unable to pay £%d to %s%s! Paid £%d instead' % [ @name, amount, paying_to, ( description ? ' for %s' % description : '' ), amount_to_pay ]
  201  				bankrupt!(beneficiary)
  202  				false
  203  			else
  204: 				puts '[%s] Paid £%d to %s%s (balance: £%d)' % [ @name, amount, paying_to, ( description ? ' for %s' % description : '' ), @currency ]
  205  				true
  206  			end
  ...
  229  			best_fee = sorted_fees.last || [ 'null', 0 ]
  230  			worst_fee = sorted_fees.first || [ 'null', 0 ]
  231: 			puts '[%s] (AI) Forecast: Worst £%d %s (%s), Best £%d %s (%s), Average £%d %s on next roll' % [ @name, worst_fee[1].abs, (worst_fee[1].to_int > 0 ? 'up' : 'down'), worst_fee[0], best_fee[1].abs, (best_fee[1].to_int > 0 ? 'up' : 'down'), best_fee[0], (fees.values.inject(:+) / fees.values.size).to_int.abs, ((fees.values.inject(:+) / fees.values.size).to_int > 0 ? 'up' : 'down') ]
  232  			sorted_fees.collect { |f| - f[1] }
  233  		end

/Users/jd/git/personal/monotony/lib/monotony/purchasable.rb:
   31  			amount = amount.to_int
   32  			if player.currency < amount then
   33: 				puts '[%s] Unable to buy %s! (short of cash by £%d)' % [ player.name, @name, ( amount - player.currency ) ]
   34  				false
   35  			else
   ..
   38  				if @owner
   39  					owner.receive(amount)
   40: 					puts '[%s] Sold %s%s to %s for £%d (new balance: £%d)' % [ @owner.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), player.name, amount, @owner.currency ]
   41  					@owner.properties.delete self
   42  				else
   43: 					puts '[%s] Purchased %s%s for £%d (new balance: £%d)' % [ player.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), amount, player.currency ]
   44  				end
   45  
   ..
   97  		# Gives a property to another player. Available for use as part of a trading behaviour.
   98  		def give_to(player)
   99: 			puts '[%s] Gave %s to %s' % [ @owner.name, @name, player.name ]
  100  			@owner.properties.delete self
  101  			@owner = player
  ...
  107  		def mortgage
  108  			unless is_mortgaged?
  109: 				puts '[%s] Mortgaged %s for £%d' % [ @owner.name, @name, @mortgage_value ]
  110  				@is_mortgaged = true
  111  				@owner.receive(@mortgage_value)
  ...
  120  			if is_mortgaged?
  121  				if @owner.currency > cost
  122: 					puts '[%s] Unmortgaged %s for £%d' % [ @owner.name, @name, cost ]
  123  					@owner.deduct(cost)
  124  					@is_mortgaged = false
  125  				else
  126: 					puts '[%s] Unable to unmortgage %s (not enough funds)' % [ @owner.name, @name ]
  127  				end
  128  			else
  129: 				puts '[%] Tried to unmortgage a non-mortgaged property (%s)' % [ @owner.name, @name ]
  130  			end
  131  			self

/Users/jd/git/personal/monotony/lib/monotony/variants.rb:
  328  					player.in_jail = true
  329  					player.move('Jail')
  330: 					puts '[%s] Got sent to jail!' % player.name
  331  				}
  332  			),

25 matches across 4 files


Searching 17 files for "puts"

/Users/jd/git/personal/monotony/lib/monotony/game.rb:
  145  				worth = @players.collect { |p| '%s: £%d' % [ p.name, p.currency ]}
  146  				header << 'Balances: %s' % worth.join(', ')
  147: 				puts header
  148: 				puts
  149  
  150  				@board.each do |property|
  151  					if position % 10 == 0 and position > 0
  152: 						puts summary.collect! { |s| s << "\n" }
  153: 						puts
  154  
  155  						summary.collect! { '' }
  ...
  186  
  187  				summary_out = summary.collect! { |s| s << "\n" }
  188: 				puts summary_out
  189: 				puts
  190  				return summary_out
  191  			end

/Users/jd/git/personal/monotony/lib/monotony/purchasable.rb:
   31  			amount = amount.to_int
   32  			if player.currency < amount then
   33: 				puts '[%s] Unable to buy %s! (short of cash by £%d)' % [ player.name, @name, ( amount - player.currency ) ]
   34  				false
   35  			else
   ..
   38  				if @owner
   39  					owner.receive(amount)
   40: 					puts '[%s] Sold %s%s to %s for £%d (new balance: £%d)' % [ @owner.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), player.name, amount, @owner.currency ]
   41  					@owner.properties.delete self
   42  				else
   43: 					puts '[%s] Purchased %s%s for £%d (new balance: £%d)' % [ player.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), amount, player.currency ]
   44  				end
   45  
   ..
   97  		# Gives a property to another player. Available for use as part of a trading behaviour.
   98  		def give_to(player)
   99: 			puts '[%s] Gave %s to %s' % [ @owner.name, @name, player.name ]
  100  			@owner.properties.delete self
  101  			@owner = player
  ...
  107  		def mortgage
  108  			unless is_mortgaged?
  109: 				puts '[%s] Mortgaged %s for £%d' % [ @owner.name, @name, @mortgage_value ]
  110  				@is_mortgaged = true
  111  				@owner.receive(@mortgage_value)
  ...
  120  			if is_mortgaged?
  121  				if @owner.currency > cost
  122: 					puts '[%s] Unmortgaged %s for £%d' % [ @owner.name, @name, cost ]
  123  					@owner.deduct(cost)
  124  					@is_mortgaged = false
  125  				else
  126: 					puts '[%s] Unable to unmortgage %s (not enough funds)' % [ @owner.name, @name ]
  127  				end
  128  			else
  129: 				puts '[%] Tried to unmortgage a non-mortgaged property (%s)' % [ @owner.name, @name ]
  130  			end
  131  			self

/Users/jd/git/personal/monotony/lib/monotony/variants.rb:
  328  					player.in_jail = true
  329  					player.move('Jail')
  330: 					puts '[%s] Got sent to jail!' % player.name
  331  				}
  332  			),

15 matches across 3 files


Searching 17 files for "puts"

/Users/jd/git/personal/monotony/lib/monotony/game.rb:
  145  				worth = @players.collect { |p| '%s: £%d' % [ p.name, p.currency ]}
  146  				header << 'Balances: %s' % worth.join(', ')
  147: 				puts header
  148: 				puts
  149  
  150  				@board.each do |property|
  151  					if position % 10 == 0 and position > 0
  152: 						puts summary.collect! { |s| s << "\n" }
  153: 						puts
  154  
  155  						summary.collect! { '' }
  ...
  186  
  187  				summary_out = summary.collect! { |s| s << "\n" }
  188: 				puts summary_out
  189: 				puts
  190  				return summary_out
  191  			end

/Users/jd/git/personal/monotony/lib/monotony/purchasable.rb:
   97  		# Gives a property to another player. Available for use as part of a trading behaviour.
   98  		def give_to(player)
   99: 			puts '[%s] Gave %s to %s' % [ @owner.name, @name, player.name ]
  100  			@owner.properties.delete self
  101  			@owner = player
  ...
  107  		def mortgage
  108  			unless is_mortgaged?
  109: 				puts '[%s] Mortgaged %s for £%d' % [ @owner.name, @name, @mortgage_value ]
  110  				@is_mortgaged = true
  111  				@owner.receive(@mortgage_value)
  ...
  120  			if is_mortgaged?
  121  				if @owner.currency > cost
  122: 					puts '[%s] Unmortgaged %s for £%d' % [ @owner.name, @name, cost ]
  123  					@owner.deduct(cost)
  124  					@is_mortgaged = false
  125  				else
  126: 					puts '[%s] Unable to unmortgage %s (not enough funds)' % [ @owner.name, @name ]
  127  				end
  128  			else
  129: 				puts '[%] Tried to unmortgage a non-mortgaged property (%s)' % [ @owner.name, @name ]
  130  			end
  131  			self

/Users/jd/git/personal/monotony/lib/monotony/variants.rb:
  328  					player.in_jail = true
  329  					player.move('Jail')
  330: 					puts '[%s] Got sent to jail!' % player.name
  331  				}
  332  			),

12 matches across 3 files


Searching 17 files for "puts"

/Users/jd/git/personal/monotony/lib/monotony/game.rb:
  145  				worth = @players.collect { |p| '%s: £%d' % [ p.name, p.currency ]}
  146  				header << 'Balances: %s' % worth.join(', ')
  147: 				puts header
  148: 				puts
  149  
  150  				@board.each do |property|
  151  					if position % 10 == 0 and position > 0
  152: 						puts summary.collect! { |s| s << "\n" }
  153: 						puts
  154  
  155  						summary.collect! { '' }
  ...
  186  
  187  				summary_out = summary.collect! { |s| s << "\n" }
  188: 				puts summary_out
  189: 				puts
  190  				return summary_out
  191  			end

/Users/jd/git/personal/monotony/lib/monotony/variants.rb:
  328  					player.in_jail = true
  329  					player.move('Jail')
  330: 					puts '[%s] Got sent to jail!' % player.name
  331  				}
  332  			),

7 matches across 2 files


Searching 19 files for "bank_balance"

/Users/jd/git/personal/monotony/lib/monotony/game.rb:
   19  		attr_accessor :community_chest
   20  		# @return [Integer] the current amount of currency held in the bank.
   21: 		attr_accessor :bank_balance
   22  		# @return [Integer] the current amount of currency held on free parking (in some game variants).
   23  		attr_accessor :free_parking_balance
   ..
   44  		# @param [Hash] opts Game configuration options
   45  		# @option opts [Integer] :free_parking_balance The amount of money stored on Free Parking at the beginning of the game (unofficial game feature in widespread use).
   46: 		# @option opts [Integer] :bank_balance Starting balance of the bank.
   47  		# @option opts [Integer] :max_turns_in_jail The maximum number of turns a player may spend in jail before being forced to pay a fine to leave.
   48  		# @option opts [Integer] :go_amount The amount of money given to a player when they pass GO.
   ..
   57  			opts = {
   58  				free_parking_balance: 0,
   59: 				bank_balance: 12755,
   60  				max_turns_in_jail: 3,
   61  				go_amount: 200,
   ..
   91  			@logger.level = Logger::INFO
   92  			@logger.datetime_format = '%H:%M:%S'
   93: 			@bank = Account.new(name: :bank, balance: opts[:bank_balance].to_int)
   94  			@free_parking = Account.new(name: :free_parking, balance: opts[:free_parking_balance].to_int)
   95  
   ..
  210  			reason = reason.to_s
  211  
  212: 			if @bank_balance > amount
  213  				player.receive(amount)
  214: 				@bank_balance = @bank_balance - amount unless player.respond_to? :is_simulation
  215: 				log '[%s] Received £%d from bank%s (balance: £%d, bank balance: £%d)' % [ player.name, amount, (reason ? ' for %s' % reason : '' ), player.currency, bank_balance ]
  216  				true
  217  			else
  218: 				player.receive(bank_balance)
  219: 				log '[%s] Unable to receive £%d from bank! Received £%d instead (balance: £%d)' % [ player.name, amount, bank_balance, player.currency ]
  220: 				@bank_balance = 0
  221  				false
  222  			end

/Users/jd/git/personal/monotony/lib/monotony/player.rb:
  185  			case beneficiary
  186  			when :bank
  187: 				@game.bank_balance = @game.bank_balance + amount_to_pay
  188  				paying_to = 'bank'
  189  			when :free_parking

13 matches across 2 files


Searching 19 files for "bank_balance"

/Users/jd/git/personal/monotony/lib/monotony/game.rb:
   45  		# @param [Hash] opts Game configuration options
   46  		# @option opts [Integer] :free_parking_balance The amount of money stored on Free Parking at the beginning of the game (unofficial game feature in widespread use).
   47: 		# @option opts [Integer] :bank_balance Starting balance of the bank.
   48  		# @option opts [Integer] :max_turns_in_jail The maximum number of turns a player may spend in jail before being forced to pay a fine to leave.
   49  		# @option opts [Integer] :go_amount The amount of money given to a player when they pass GO.
   ..
   58  			opts = {
   59  				free_parking_balance: 0,
   60: 				bank_balance: 12755,
   61  				max_turns_in_jail: 3,
   62  				go_amount: 200,
   ..
   92  			@logger.level = Logger::INFO
   93  			@logger.datetime_format = '%H:%M:%S'
   94: 			@bank = Account.new(name: :bank, balance: opts[:bank_balance].to_int)
   95  			@free_parking = Account.new(name: :free_parking, balance: opts[:free_parking_balance].to_int)
   96  
   ..
  211  			reason = reason.to_s
  212  
  213: 			if @bank_balance > amount
  214  				player.receive(amount)
  215: 				@bank_balance = @bank_balance - amount unless player.respond_to? :is_simulation
  216: 				log '[%s] Received £%d from bank%s (balance: £%d, bank balance: £%d)' % [ player.name, amount, (reason ? ' for %s' % reason : '' ), player.currency, bank_balance ]
  217  				true
  218  			else
  219: 				player.receive(bank_balance)
  220: 				log '[%s] Unable to receive £%d from bank! Received £%d instead (balance: £%d)' % [ player.name, amount, bank_balance, player.currency ]
  221: 				@bank_balance = 0
  222  				false
  223  			end

/Users/jd/git/personal/monotony/lib/monotony/player.rb:
  185  			case beneficiary
  186  			when :bank
  187: 				@game.bank_balance = @game.bank_balance + amount_to_pay
  188  				paying_to = 'bank'
  189  			when :free_parking

12 matches across 2 files


Searching 19 files for "player.currency"

/Users/jd/git/personal/monotony/lib/monotony/basicproperty.rb:
   44  					end
   45  				else
   46: 					player.behaviour[:purchase_possible].call(game, player, self) if player.currency >= cost
   47  				end
   48  			end

/Users/jd/git/personal/monotony/lib/monotony/behaviour.rb:
    5  			purchase_possible: Proc.new { |game, player, property| 
    6  				# If the next turn could land us somewhere more expensive than we can afford, purchase should be less likely
    7: 				if player.exposure.max > (player.currency - property.value)
    8  					risk_factor = 0.75
    9  				else
   ..
   27  					# Always if it completes a set
   28  					property.unmortgage
   29: 				elsif ( property.cost.to_f / player.currency.to_f * 100.0 ) < 15.0
   30  					# Only if we're not about to be stung for landing somewhere expensive
   31: 					if player.exposure.max > (player.currency - property.cost)
   32  						property.unmortgage
   33  					end
   ..
   36  			houses_available: Proc.new { |game, player, property|
   37  				# Buy houses when possible, but don't spend more than 40% of my money on them in any one turn
   38: 				can_afford = ( ( player.currency * 0.4 ) / property.house_cost ).floor
   39  				max_available = 4 - property.num_houses
   40  				to_buy = [ can_afford, max_available ].min
   41  
   42  				# Think twice about buying a house if we're likely to land somewhere expensive next turn
   43: 				if player.exposure.max > (player.currency - property.house_cost)
   44  					risk_factor = 0.6
   45  				else
   ..
   53  			hotel_available: Proc.new { |game, player, property|
   54  				# Buy a hotel, unless it's more than two thirds of my current balance.
   55: 				property.add_hotel unless ( property.hotel_cost.to_f / player.currency.to_f * 100.0) > 66.6
   56  			},
   57  			money_trouble: Proc.new { |game, player, amount|
   58  				portfolio = player.properties.sort_by { |p| p.mortgage_value }
   59: 				while player.currency < amount do
   60  					if portfolio.length > 0
   61  						property = portfolio.shift
   ..
   64  								property = property.sell_hotel
   65  							end
   66: 							break if player.currency >= amount
   67  
   68  							while property.num_houses > 0
   69  								property = property.sell_houses(1)
   70: 								break if player.currency >= amount
   71  							end
   72: 							break if player.currency >= amount
   73  
   74  							property = property.mortgage
   ..
   92  			    		factors[:number_owned] = ( desirable_property.number_of_set_owned.to_f + 1.0 ) / desirable_property.number_in_set(game).to_f
   93  			    		# More likely to trade if cash rich
   94: 						factors[:currency] = player.currency.to_f / 1000.to_f
   95  			    		# More likely to trade if close to GO
   96  			    		factors[:proximity_to_go] = 1 - ( player.distance_to_go.to_f / game.board.length.to_f )
   97  
   98  			    		# We use these factors to work out how much to offer relative to how much we have
   99: 			    		offer_amount = player.currency * factors.values.inject(&:*)
  100: 			    		if offer_amount > desirable_property.cost and player.currency >= offer_amount
  101  							game.log '[%s] Placing offer of £%d on %s (owned by %s) [%f]' % [ player.name, offer_amount, desirable_property.name, desirable_property.owner.name, factors.values.inject(&:*) * 100 ]
  102  
  ...
  113  				factors[:value_added] = 1 - ( property.cost.to_f / amount.to_f )
  114  				# More likely to accept a trade if low on cash
  115: 				factors[:currency] = 1 - ( player.currency.to_f / 1000.to_f )
  116  
  117  				# Random element

/Users/jd/git/personal/monotony/lib/monotony/purchasable.rb:
   30  		def sell_to(player, amount = cost)
   31  			amount = amount.to_int
   32: 			if player.currency < amount then
   33: 				@player.game.log '[%s] Unable to buy %s! (short of cash by £%d)' % [ player.name, @name, ( amount - player.currency ) ]
   34  				false
   35  			else
   ..
   41  					@owner.properties.delete self
   42  				else
   43: 					@player.game.log '[%s] Purchased %s%s for £%d (new balance: £%d)' % [ player.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), amount, player.currency ]
   44  				end
   45  

/Users/jd/git/personal/monotony/lib/monotony/simulatedplayer.rb:
   13  			@turns_in_jail = player.turns_in_jail
   14  			@jail_free_cards = player.jail_free_cards
   15: 			@currency = player.currency
   16  			@game = player.game.clone
   17  			@name = 'sim'

/Users/jd/git/personal/monotony/lib/monotony/station.rb:
   17  					player.pay(owner, rent[multiplier - 1])
   18  				else
   19: 					player.behaviour[:purchase_possible].call(game, player, self) if player.currency >= cost
   20  				end
   21  			end

/Users/jd/git/personal/monotony/lib/monotony/utility.rb:
   16  					player.pay(owner, rent)
   17  				else
   18: 					player.behaviour[:purchase_possible].call(game, player, self) if player.currency >= cost
   19  				end
   20  			end

21 matches across 6 files


Searching 19 files for "player.curr"

/Users/jd/git/personal/monotony/lib/monotony/purchasable.rb:
   30  		def sell_to(player, amount = cost)
   31  			amount = amount.to_int
   32: 			if player.currency < amount then
   33: 				@player.game.log '[%s] Unable to buy %s! (short of cash by £%d)' % [ player.name, @name, ( amount - player.currency ) ]
   34  				false
   35  			else
   ..
   41  					@owner.properties.delete self
   42  				else
   43: 					@player.game.log '[%s] Purchased %s%s for £%d (new balance: £%d)' % [ player.name, @name, (is_mortgaged? ? ' (mortgaged)' : ''), amount, player.currency ]
   44  				end
   45  

/Users/jd/git/personal/monotony/lib/monotony/simulatedplayer.rb:
   13  			@turns_in_jail = player.turns_in_jail
   14  			@jail_free_cards = player.jail_free_cards
   15: 			@currency = player.currency
   16  			@game = player.game.clone
   17  			@name = 'sim'

/Users/jd/git/personal/monotony/lib/monotony/station.rb:
   17  					player.pay(owner, rent[multiplier - 1])
   18  				else
   19: 					player.behaviour[:purchase_possible].call(game, player, self) if player.currency >= cost
   20  				end
   21  			end

/Users/jd/git/personal/monotony/lib/monotony/utility.rb:
   16  					player.pay(owner, rent)
   17  				else
   18: 					player.behaviour[:purchase_possible].call(game, player, self) if player.currency >= cost
   19  				end
   20  			end

6 matches across 4 files


Searching 19 files for ".currency"

/Users/jd/git/personal/monotony/lib/monotony/basicproperty.rb:
   70  					@owner.game.log '[%s] Cannot place more than 4 houses on %s' % [ @owner.name, @name ]
   71  				else
   72: 					if @owner.currency < housing_value
   73: 						@owner.game.log '[%s] Unable to buy %d houses! (short of cash by £%d)' % [ @owner.name, number, (housing_value - @owner.currency) ]
   74  						false
   75  					else
   ..
   77  						@owner.game.num_houses = @owner.game.num_houses - number
   78  						@num_houses = @num_houses + number
   79: 						@owner.game.log '[%s] Purchased %d houses on %s for £%d (new balance: £%d)' % [ @owner.name, number, @name, housing_value, @owner.currency ]
   80  						true
   81  					end
   ..
  110  			if @num_houses == 4
  111  				if @owner.game.num_houses > 0
  112: 					if @owner.currency < @hotel_cost
  113: 						@owner.game.log '[%s] Unable to buy a hotel! (short of cash by £%d)' % [ @owner.name, (@hotel_cost - @owner.currency) ]
  114  					else
  115  						@owner.deduct(@hotel_cost)
  ...
  117  						@owner.game.num_houses = @owner.game.num_houses + 4
  118  						@owner.game.num_hotels = @owner.game.num_hotels - 1
  119: 						@owner.game.log '[%s] Purchased a hotel on %s for £%d (new balance: £%d)' % [ @owner.name, @name, @hotel_cost, @owner.currency ]
  120  					end			
  121  				else

/Users/jd/git/personal/monotony/lib/monotony/game.rb:
  145  				header = ''
  146  
  147: 				worth = @players.collect { |p| '%s: £%d' % [ p.name, p.currency ]}
  148  				header << 'Balances: %s' % worth.join(', ')
  149  				puts header
  ...
  268  						next
  269  					end
  270: 					log '[%s] Begins on %s (balance: £%d)' % [ turn.name , turn.current_square.name, turn.currency ]
  271  
  272  					turn.properties.each do |property|
  ...
  274  						when Station
  275  							if property.is_mortgaged?
  276: 								turn.behaviour[:unmortgage_possible].call(self, turn, property) if turn.currency > property.cost
  277  							end
  278  						when Utility
  279  							if property.is_mortgaged?
  280: 								turn.behaviour[:unmortgage_possible].call(self, turn, property) if turn.currency > property.cost
  281  							end
  282  						when BasicProperty
  283  							if property.is_mortgaged?
  284: 								turn.behaviour[:unmortgage_possible].call(self, turn, property) if turn.currency > property.cost
  285  							else
  286  								if property.set_owned?
  ...
  333  					log '[%s] Next throw' % turn.name if double
  334  					redo if double
  335: 					log '[%s] Ended on %s (balance: £%d)' % [ turn.name, turn.current_square.name, turn.currency ]
  336  				end
  337  
  ...
  339  				if active_players.count == 1
  340  					winner = still_in.first
  341: 					log '[%s] Won the game! Final balance: £%d, Property: %s' % [ winner.name, winner.currency, winner.properties.collect {|p| p.name} ]
  342  					@completed = true
  343  					break

/Users/jd/git/personal/monotony/lib/monotony/simulatedplayer.rb:
   13  			@turns_in_jail = player.turns_in_jail
   14  			@jail_free_cards = player.jail_free_cards
   15: 			@currency = player.currency
   16  			@game = player.game.clone
   17  			@name = 'sim'

/Users/jd/git/personal/monotony/lib/monotony/station.rb:
   17  					player.pay(owner, rent[multiplier - 1])
   18  				else
   19: 					player.behaviour[:purchase_possible].call(game, player, self) if player.currency >= cost
   20  				end
   21  			end

/Users/jd/git/personal/monotony/lib/monotony/utility.rb:
   16  					player.pay(owner, rent)
   17  				else
   18: 					player.behaviour[:purchase_possible].call(game, player, self) if player.currency >= cost
   19  				end
   20  			end

16 matches across 5 files
